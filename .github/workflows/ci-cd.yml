name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_STREAMLIT: ${{ github.repository }}/streamlit

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 app/ ai/ config/ data/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ ai/ config/ data/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app/ ai/ config/ data/

    - name: Import sorting check with isort
      run: |
        isort --check-only app/ ai/ config/ data/

    - name: Run tests with pytest
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        pytest tests/ -v --cov=app --cov=ai --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Streamlit
      id: meta-streamlit
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_STREAMLIT }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Streamlit image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.streamlit
        push: true
        tags: ${{ steps.meta-streamlit.outputs.tags }}
        labels: ${{ steps.meta-streamlit.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}

        # Update image tags in Kubernetes manifests
        sed -i "s|recommendation-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:develop-${IMAGE_TAG:0:7}|g" kubernetes/fastapi.yaml
        sed -i "s|recommendation-streamlit:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_STREAMLIT }}:develop-${IMAGE_TAG:0:7}|g" kubernetes/streamlit.yaml

        # Deploy to staging namespace
        kubectl apply -f kubernetes/ -n recommendation-staging

        # Wait for rollout
        kubectl rollout status deployment/fastapi -n recommendation-staging --timeout=300s
        kubectl rollout status deployment/streamlit -n recommendation-staging --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig

        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=fastapi -n recommendation-staging --timeout=300s

        # Get service URL and test
        API_URL=$(kubectl get service fastapi-service -n recommendation-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$API_URL" ]; then
          API_URL=$(kubectl get service fastapi-service -n recommendation-staging -o jsonpath='{.spec.clusterIP}')
        fi

        # Basic health check
        kubectl port-forward service/fastapi-service 8080:5000 -n recommendation-staging &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}

        # Update image tags in Kubernetes manifests
        sed -i "s|recommendation-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest|g" kubernetes/fastapi.yaml
        sed -i "s|recommendation-streamlit:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_STREAMLIT }}:latest|g" kubernetes/streamlit.yaml

        # Deploy to production namespace
        kubectl apply -f kubernetes/ -n recommendation-system

        # Wait for rollout
        kubectl rollout status deployment/fastapi -n recommendation-system --timeout=600s
        kubectl rollout status deployment/streamlit -n recommendation-system --timeout=600s

    - name: Run production smoke tests
      run: |
        export KUBECONFIG=kubeconfig

        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=fastapi -n recommendation-system --timeout=300s

        # Get service URL and test
        kubectl port-forward service/fastapi-service 8080:5000 -n recommendation-system &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "API Health: âœ…"
        echo "Deployment SHA: ${{ github.sha }}"
