version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: ml_system_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ml_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ml_system_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ml_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ml_system_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ml_network

  postgres:
    image: postgres:15-alpine
    container_name: ml_system_postgres
    environment:
      POSTGRES_DB: ml_system
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/create_table.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_user -d ml_system"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ml_network

  # ML System Services
  recommendation_api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: ml_system_recommendation_api
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://ml_user:ml_password@postgres:5432/ml_system
      - ENVIRONMENT=production
      - FASTAPI_HOST=0.0.0.0
      - FASTAPI_PORT=8000
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config:/app/config
    networks:
      - ml_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  streamlit_ui:
    build:
      context: .
      dockerfile: docker/Dockerfile.streamlit
    container_name: ml_system_streamlit
    depends_on:
      recommendation_api:
        condition: service_healthy
    ports:
      - "8501:8501"
    environment:
      - RECOMMENDATION_API_URL=http://recommendation_api:8000
      - STREAMLIT_HOST=0.0.0.0
      - STREAMLIT_PORT=8501
    volumes:
      - ./data:/app/data
    networks:
      - ml_network

  # ML System Orchestrator
  ml_system_orchestrator:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml_system
    container_name: ml_system_orchestrator
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8003:8003"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://ml_user:ml_password@postgres:5432/ml_system
      - ENVIRONMENT=production
      - DEBUG_MODE=false
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config:/app/config
    networks:
      - ml_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ml_system_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ml_network

  grafana:
    image: grafana/grafana:latest
    container_name: ml_system_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ml_network

# Volumes for data persistence
volumes:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  postgres_data:
  prometheus_data:
  grafana_data:

# Network for service communication
networks:
  ml_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
