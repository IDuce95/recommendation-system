services:
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: recommendation_db
    environment:
      POSTGRES_DB: ${DB_NAME:-recommendation_system}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/docker-entrypoint-initdb.d
      - ./logs/postgres:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-recommendation_system}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - recommendation_network
    restart: unless-stopped

  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    container_name: recommendation_mlflow
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-recommendation_system}
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    ports:
      - "5555:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./mlflow_artifacts:/mlflow/artifacts
      - ./logs/mlflow:/mlflow/logs
    networks:
      - recommendation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      mlflow server \
        --backend-store-uri postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-recommendation_system} \
        --default-artifact-root /mlflow/artifacts \
        --host 0.0.0.0 \
        --port 5000 \
        --serve-artifacts

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: recommendation_api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-recommendation_system}
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - PYTHONPATH=/app
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./embeddings:/app/embeddings
      - ./models:/app/models
      - ./logs/api:/app/logs
      - .:/app
    networks:
      - recommendation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: python -m uvicorn app.api.fastapi_server:app --host 0.0.0.0 --port 5000 --reload

  streamlit:
    build:
      context: .
      dockerfile: docker/Dockerfile.streamlit
    container_name: recommendation_streamlit
    environment:
      - API_HOST=api
      - API_PORT=5000
      - STREAMLIT_HOST=0.0.0.0
      - STREAMLIT_PORT=8501
      - PYTHONPATH=/app
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./logs/streamlit:/app/logs
      - .:/app
    networks:
      - recommendation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    build:
      context: .
      dockerfile: docker/Dockerfile.prometheus
    container_name: recommendation_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus/data
      - ./logs/prometheus:/var/log/prometheus
    networks:
      - recommendation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    build:
      context: .
      dockerfile: docker/Dockerfile.grafana
    container_name: recommendation_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - grafana_data:/var/lib/grafana
      - ./logs/grafana:/var/log/grafana
    networks:
      - recommendation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/docker-volumes/postgres_data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/docker-volumes/prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/docker-volumes/grafana_data

networks:
  recommendation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
